comments:
	;; comment line
	;; comment
		block
	;;
	comment
	block
	;

identifiers (variable names) start with an alphabetic character, and can include numbers and apostrophe:
	abc'efg0123

defining a variable with unique type:
	v :T = ...
	v = ...
defining a variable with mutable borrow type:
	v :T! = ...
	v! = ...
defining a variable with immutable borrow type:
	v :T& = ...
	v& = ...
defining a variable with shared type:
	v :T$ = ...
	v$ = ...

assignment to mutable variables (ie those with unique or mutable'borrow type):
	v. = ...

integer types:
, Int: word size (C3 "isz")
, IntU: word size unsigned (C3 "usz")
, Int64: 64 bits (C3 "long")
, Int32: 32 bits (C3 "int")
, Int16: 16 bits (C3 "short")
, Int8: 8 bits (C3 "ichar")
, IntC: 8 bits unsigned (C3 "char")
, IntA: arbitrary size
integer literals by default have type "Int":
	1'234'567'890
	0x1234'5678'9ABC'DEF0
character literals:
	c :IntC = 'a'  ;; ASCII code for character "a"
	'\n' ;; ASCII code for character with escape code "\n"
	'\x12' ;; a byte with hexadecimal value 0x12
integers (and in fact, all numbers) can automatically be converted to bigger types
	i :Int64 = 123
	i = 123.to'Int64

floating'point number types:
, Num: single precision (C3 "float")
, Num2: double precision (C3 "double")
, NumA: arbitrary precision with ball arithmetic
floating point literals by default have "Num2" type:
	1.0
	1.23e4
	0x1:0
	0x1:23p4

complex numbers can be made of any type implementing the "Num" trait
all numerical types mentioned above do implement the "Num" trait
	c :Complex[Int] = 1 + 1i
	c = 1 + 0i
	c = Complex[Int] 1 0

lists:
	l :List[Char] = ['a', 'b', 'c']
indexing:
	e :Maybe[Char] = l_1
note that the type of the result of indexing above is actually "Maybe[Char&]&",
	which is copied into the variable with type "Maybe[Char]"
mutating lists:
	l.put 'd' at: 3 ;; ['a', 'b', 'c', 'd']
	l.put 'e' at: 0 ;; ['e', 'b', 'c', 'd']

character strings are UTF8 encoded, and implemented a list of characters:
	s :CharS = "abc def"
string interpolation: "abc{x}"
alternative syntax that makes writing single word strings easier:
	'abc
multiline string equivalent to "first line\n\tsecond line":
	s = "
		first line
			second line
	"
it's better to split long strings into a list of single'line strings:
	s = """
		first line
			second line
	"""
which is equivalent to:
	["first line", "\tsecond line"]

dictionaries are indexed using strings (instead of "IntU" as in lists):
	d :Dict[Int] = [a: 1, b: 2, c: 3]
indexing:
	d_'a

records:
	r :(Int, Int, c: Int) = 1, 2, c: 3
to access elements:
	r.a
	r.0
multiple assignment using record expansion:
	a, b = 1, 2, 3
tagged fields can be expanded too, if the name of variables match:
	a, b = a: 1, b: 2
mutating a record field:
	r.a = 10
small records will be kept on stack, big ones on the heap

function:
	f = { a :A&, b :B! -> C | ... }
note that the type of above function is:
	(a: A&, b: B! -> C)
function call:
	f x y
which is equivalent to these forms:
	f(x, y)
	f b: y a: x
	x, y >> f

default values for parameters:
	f = { a = 1 , b = 2 | ... }
	f b: 22
	f 11
	f()

{f x y} can be written as: || f x y

conditional expression:
	condition.then {} else: {}
	condition1.then {} || condition2.then {} || condition3.then {} else: {}

and or:
	a && b
	a \\ b
which are equivalent to:
	a .and {b}
	a .or {b}
not: -a

there is no loop construct directly available in Jina
instead we have iterators with "each" method, that is internally implemented using C3 loop
	iter.each { x | ... }
any type that implements "Iter" trait, must define an "iter" method,
	whose returned value stores the mutable state

actor:
	a :Actor[S] = Actor.new S.new()
	a.do { b :S! | ... }

modules are files containing definitions
any definition whose name is the module's name, will be exported (ie are accessible outside of the module)
exported names can have these kind of extensions:
, a number
, a word starting with capital letter
, letters inside brackets
to access the definitions in a module which is inside a directory: dir.Definition
to hide a module so it can't be accessed from modules in the parent directory, or outside of the package,
	append an apostrophe at the end of its file name

a package is a collection of modules
in a project directory, we can have multiple package directories
	the name of the package directory is the package name, plus a ".jin" extension
packages are of two kinds:
, application packages that contain a file named "0.jina" (which must contain the init function)
, library packages

to use a library package in a another package, create a file named "your'chosen'name.p" with this format:
, first line is the name of the package
, second line is the URL of the project containing the package
, the format of the URL (where protocol can be gnunet, git):
	protocol://address'of'the'project'containing'package'directory
, the third line can contain a public key, which will be used to check the signature provided by the project
if there is no URL, it refers to the current project

to use the definitions of a package:
	dot'p'file'name.Definition
definitions in "std" package, are directly accessible
	so there is no need for a "std.p" file, and prefixing with "std."

type definition:
	T := a: A, b: B
defining methods (using a namespace):
	;ns T
		new = { a :A -> S |
			b = ...
			a, b
		}
		m1 = { self!, x :X -> Y |
			...
		}
		m2 = { self |
			...
		}
to create an instance of the type:
	i = T a: x, b: y
	i = T.new a: x
accessing a member:
	i.a
calling a method (note that there is no record field named "m", otherwise this will not work):
	i.m x
which is equivalent to:
	T.m i x
if a method has no are (other than self), it can be called like this: i.m

enums:
	Bool := #true #false
	x :Bool = #true
	x = Bool#true
type "?A" is a shortcut for "Maybe[A]"
	Maybe[t] := #result t #null
	x :?A = #null
	x >> {
		#result x | ...
		#null | ...
	}

traits:
	;tr T
		m1 :(self: T!, x: X -> Y)
		m2 = { self! |
			;; default implementation
		}
trait inheritance:
	;tr T ::T1 ::T2
		...
defining the methods of a type that implements some traits:
	;ns T ::T1 ::T2
		m1 = ...
		m2 = ...
		;; T1
		m3 = ...
		m4 = ...
		;; T2
		...

generics:
	T[x] := a: x, b: x
bounded generics:
	T[x::ATrait] := a: x, b: x

to directly enter C3 code:
	;c3 ...
		...
or:
	;c3
	...
	;
declaring functions and types from a C lib
	;c3 extern fn ...;
	;c3 typedef ... = any;
beware! with great power comes great responsibility
