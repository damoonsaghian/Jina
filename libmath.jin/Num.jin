;; declare required functions and types from flint
;c3 extern fn ...;
;c3 typedef ... = any;

;; https://flintlib.org/doc/

;; https://flintlib.org/doc/fmpz.html
;c3 typedef NumI = fmpz_t

;ns NumI ::Ord ::CharRep

NumInt := NumI \ Int \ IntU

NumAny := Num \ NumInt \ Float \ Float2

;; https://flintlib.org/doc/arb.html
;c3 typedef Num = arb_t

;ns Num ::OrdMaybe ::CharRep
	plus = { self&, addend :NumAny -> Num |
	}
	minus = { self&, subtrahend :NumAny -> Num |
	}
	
	add = { self!, addend :NumAny -> Num! |
	}
	sub = { self!, subtrahend :NumAny -> Num! |
	}
	
	neg = { self& -> Num |
	}
	abs = { self& -> Num |
	}
	
	mul = { self, other :Num -> Num |
	}
	div = { self, other :Num -> Num |
	}
	pow = { self, other :Num -> Num |
	}
	
	next'up = { self -> Num |
	}
	
	next'down = { self -> Num |
	}
	
	cos = { self | -> Num
	}
	acos = { self -> Num |
	}
	cosh = { self -> Num |
	}
	atanh = { self -> Num |
	}
	sin = { self -> Num |
	}
	asin = { self -> Num |
	}
	sinh = { self -> Num |
	}
	tan = { self -> Num |
	}
	atan = { self -> Num |
	}
	atan2 = { self -> Num |
	}
	tanh = { self -> Num |
	}
	
	log = { self -> Num |
	}
	log2 = { self -> Num |
	}
	log10 = { self -> Num |
	}
	
	nan =
	inf =
	
	e = ;; base of the natural logarithm
	pi =
	
	;; OrdMaybe
	
	is'equal = { self, other :Num -> ?Bool |
	}
	
	is'less = { self, other :Num -> ?Bool |
	}
	
	;; CharRep
	to'chars = {}
