;; byte sized unsigned integers
;c3 typedef Char = char;

;ns Char ::Ord

CharS := List[Char]

;ns CharS ::CharRep
	;; implement list methods such that they respect UTF8 encoding
	
	replace = { self!, substring :CharS&, replacement :CharS& |
	}
	
	split =
	join =
	
	find = { self, substring :CharS& -> ?Int |
	}
	contains = { self, substring :CharS& -> Bool |
	}
	
	trim'prefix = { self!, prefix :CharS& |
	}
	trim'suffix = { self!, suffix :CharS& |
	}
	;; trim ASCII whitespace from the start of the string
	trim'start = { self! |
	}
	;; trim ASCII whitespace from the end of the string
	trim'end = { self! |
	}
	;; trim ASCII whitespace from the start and end of the string
	trim = { self! |
	}
	
	truncate = { self!, max'len :Int |
	}
	
	clear = { self! | List.clear self }
	
	to'lower = { self! |
	}
	to'upper = { self! |
	}
	
	to'int = { self -> ?Int |
	}
	
	;; CharRep
	to'chars = { self | self }

;tr CharRep
	to'chars :( self -> CharS )
