;; std::collections::list(<t>)
;; the initial list will be on stack, if number of elements and their size is small
	when we try to mutate it, and its size exceeds the initial size, it will be reallocated on the heap

;; implement as a combination of list (fast read) and linked list (fast write)
;; std::collections::linkedlist(<t>)
;; originally stored as a list with a defined length and number of elements
;; any mutation other than appending, splits the array and links them
;; splat chunks except the last one, will be filled from the end

;c3 typedef List = ;

;ns List[x] ::Iter
	get = { self&, index :Int -> ?x& |
		;; checks if index is less than the length
	}
	
	append = { self!, element :x |
	}
	
	extend = { self!, ext :List[x]& |
	}
	
	put = { self!, element :x, at :Int |
	}
	
	insert = { self!, element :x, at :Int |
	}
	
	slice = { self!, from :Int, to :?Int = #null |
	}
	
	remove = { self!, at :Int |
	}

	;;impl Iter
	iter = {}
