;c3 typedef Int = long;

;ns Int ::Ord ::CharRep
	add = { self, addend :Int -> Int |
		;c3 return self + addend;
	}
	
	sub = { self, subtrahend :Int -> Int |
		;c3 return self - subtrahend;
	}
		
	mul = { self, multiplicand :Int -> Int |
		;c3 return self * multiplicand;
	}
	
	div = { self, divisor :Int -> Int |
		;c3 return self / divisor;
	}
	
	mod = { self, devisor :Int -> Int |
		;c3 return self % divisor;
	}
	
	exp = { self, exponent :Int -> Int |
		;c3 return self ^ exponent;
	}
	
	neg = { self ->  Int |
		;c3 return -self;
	}
	
	abs = { self -> Int |
		;c3 abs(self);
	}
	
	min = ;c3
	max = ;c3
	
	;; create a range iterator
	til = { self, end :Int -> Iter[Int] |
	}
	
	;; Ord
	
	equal = { self, other :Int -> Bool |
		;c3 self == other;
	}
	
	after = { self, other :Int -> Bool |
		;c3 self > other;
	}
	
	;; CharRep
	to'chars = { self -> CharS |
	}
