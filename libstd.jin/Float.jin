;c3 typedef Float = double;

;ns Float ::Ord ::CharRep
	add = { self, addend :Float\Int -> Float |
		;c3 return self + addend;
	}
	
	mul = { self, multiplicand :Float\Int -> Float |
		;c3 return self * multiplicand;
	}
	
	div = { self, divisor :Float\Int -> Float |
		;c3 return self / divisor;
	}
	
	exp = { self, exponent :Float\Int -> Float |
		;c3 return self ^ exponent;
	}
	
	neg = { self -> Float |
		;c3 return -self;
	}
	
	abs = { self -> Float |
		;c3 return abs(self);
	}
	
	next'up = { self -> Float |
	}
	next'down = { self -> Float |
	}
	
	cos = { self -> Float |
	}
	acos = { self -> Float |
	}
	cosh = { self -> Float |
	}
	atanh = { self -> Float |
	}
	sin = { self -> Float |
	}
	asin = { self -> Float |
	}
	sinh = { self -> Float |
	}
	tan = { self -> Float |
	}
	atan = { self -> Float |
	}
	atan2 = { self -> Float |
	}
	tanh = { self -> Float |
	}
	
	log = { self -> Float |
	}
	log2 = { self -> Float |
	}
	log10 = { self -> Float |
	}
	
	to'int = { self, direction :#up\#down -> Int |
	}
	
	nan = ;c3
	inf = ;c3
	
	;; base of the natural logarithm
	e = ;c3
	
	pi = ;c3
	
	;; Ord
	
	equal = { self, other :Float -> Bool |
		;c3 self == other;
	}
	
	after = { self, other :Float -> Bool |
		;c3 self > other;
	}
	
	;; CharRep
	to'chars = { self -> CharS |
	}
