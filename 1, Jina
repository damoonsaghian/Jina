Jina is a programming language with sane memory management, actors, and a coherent type system and syntax

Mahsa Jina Amini was a 22 years old girl, murdered by the evil Islamic regime in Iran
at her funeral, these words were written on a stone above her grave:
	beloved Jina, you will not die, your name will become a code

sane memory management means no garbage collector
	"https://www.toptal.com/software/eliminating-garbage-collector"
	"http://blog.skylight.io/rust-means-never-having-to-close-a-socket/"
to achieve that, Jina introduces three special tags for types:
, unique type: T
, mutable borrow type: T!
, immutable borrow type: T&
, shared type: T$

when a value with unique type is aliased:
, if it is static (ie a module definition), the alias is a reference to the value
	but when it's mutated, the alias will own a copy of the value (which will not be static anymore)
, otherwise, if it's not used in the following block,
	its stack part will be copied, and its heap part will be moved into the alias
, otherwise, the alias will own a copy of the value

borrow types have an scope tag following the "&/!" tag, which will be inherited by further borrowers
scope tags are inferred in most cases, and only required to be explicitly given, in certain situation
function arguments with borrow type have generic scope tags: a0, a1, a2 ...
for functions with multiple borrow arguments, that also return a borrow type,
	and the scope tag of returned type is inherited from any argument other than the first one (index 0),
	the returned type must determine which argument will the tag be inherited from
	A&, B& -> C&1
the borrows created inside the function have scope tag "n+1", where "n" is the scope tag of parent function
the scope tag in static functions (that have no parents) is zero
only borrows with matched scope tags can be assigned to each other (checked at compile'time)
this simple rule automatically guarantees correct lifetimes, cause it means:
, we can't assign a locally created (or moved) value, to a mutable borrow variable captured in a closure
, we can't return a borrow from a function, unless it's originally borrowed from one of the function arguments

mutation of unique types, can only be seen by one variable
mutable borrow types allow shared mutation

dealing with allocated memory, at the end of functions:
, for unique types, if they are not moved out of the function, their heap memory will be deallocated
, for borrow types, since they don't own the value, nothing happens
, for shared types, the reference count will be decreased by one, and when it reaches zero,
	their heap memory will be deallocated

behavior of types in variable definitions (and also assignments, in case of mutable ones, ie T and T!)
when a variable of type "T" is put into:
, a variable of type "T", static'borrow/move/copy
, a variable of type "T$", static'borrow/move/copy
, a variable of type "T&", borrow
, a variable of type "T!", borrow
when a variable of type "T$" is put into:
, a variable of type "T", it's compile time error
, a variable of type "T$", ref count
, a variable of type "T&", borrow
, a variable of type "T!", it's compile time error
when a variable of type "T&" is put into:
, a variable of type "T", copy
, a variable of type "T$", it's compile time error
, a variable of type "T&", borrow
, a variable of type "T!", it's compile time error
when a variable of type "T!" is put into:
, a variable of type "T", copy
, a variable of type "T$", it's compile time error
, a variable of type "T&", borrow
, a variable of type "T!", borrow

in Jina generic types do not accept borrow types (or compound types containing borrow type),
	unless it's explicitly indicated by putting a borrow tag after the generic type
this is necessary for scope tags to be statically verifiable
in other words, borrows can't be wrapped, they leak
this is also true for struct definitions:
	S& := T, T$, T&, T!
so plane structs can only contain unique and shared types:
	S := T, $T
and when it's assigned to variables of a tagged version of that type:
	v :S$
		v.0 :T$
		v.1 :T$
	v :S&
		v.0 :T&
		v.1 :T&
	v :S!
		v.0 :T!
		v.1 :T&

sharing mutable data in concurrent parts of a program is problematic
a data race happens when these three behaviors occur:
, two or more pointers access the same data at the same time
, at least one of the pointers is being used to write to the data
, there's no mechanism being used to synchronize access to the data
to deal with it, programming languages choose different approaches:
, some implement complicated and error prone lock mechanisms
, some abandon concurrency, and make single threaded programs
, functional programming languages avoid mutability as much as possible
	and when mutability is necessary, they use monads or algebraic effects to control shared mutability
	avoiding mutability, and the need for aggressive garbage collection, is not good for performance

Jina uses actors for asynchronous programming, and controls aliasing (sharing) and mutability using type tags,
	ie the same approach used to deal with memory management
messages sent to actors are closures that the (generic) type of their capture is untagged
and according to what mentioned above, messages can't capture borrows,
	their captured variables have either unique or shared (immutable) type
so messages can safely be called concurrently, since they can't change their captured environment

actors are opaque types, ie their internal components are not accessible,
	and are referred to by an ID, instead of a memory address
actors (and their messages) can only be destroyed explicitly
reference counting combined with interior mutability can create reference cycles
	"https://doc.rust-lang.org/book/ch15-06-reference-cycles.html"
	in Jina interior mutability is only possible using actors
	since actors are not reference counted, there is no reference cycles in Jina

types show us what we can do with the data, ie which operations are valid
subtyping is problematic:
"https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)"
"https://www.tedinski.com/2018/06/26/variance.html"
i feel that this problem was the motivation behind dynamic typing (another bad design)
to avoid this problem, some languages (eg Rust) have two kinds of types:
, concrete types can be instantiated, but cannot have subtypes
, abstract types (also called traits or interfaces) cannot be instantiated, but can have subtypes
Rust has trait objects (dynamic interfaces) with the same problem regarding variance
	https://users.rust-lang.org/t/vector-covariant-in-its-element-type/80582
	https://stackoverflow.com/questions/55200843/what-does-it-mean-that-box-is-covariant-if-boxdyn-b-is-not-a-subtype-of-boxdy
there is no trait objects in Jina

Jina compiles to C3, and thus can easily use existing C libraries

Jina is installed by default in SPM Linux
in other Unix'like systems, with "gnunet" installed, you just need "spm.sh" file:
, install "gnunet" package
, download "spm" directory from SPM Linux, and run:
	sh spm/install.sh
, install Jina:
	spm install $gnunet_namespace jina
