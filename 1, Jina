Jina is a programming language with sane memory management, actors, and a coherent type system and syntax

Mahsa Jina Amini was a 22 years old girl, murdered by the evil Islamic regime in Iran
at her funeral, these words were written on a stone above her grave:
	beloved Jina, you will not die, your name will become a code

sane memory management means no garbage collector
"https://www.toptal.com/software/eliminating-garbage-collector"
"http://blog.skylight.io/rust-means-never-having-to-close-a-socket/"

there are four kinds of types in Jina:
, unique: T
, mutable borrow: T!
, immutable borrow: T&
, shared: T$

when a value with unique type is aliased:
, if it is static (ie a module definition), the alias is a reference to the value
	but when it's mutated, the alias will own a copy of the value (that is not be static anymore)
, otherwise, if it's not used in the following block,
	its stack part will be copied, and its heap part will be moved into the alias
, otherwise, the alias will own a copy of the value

borrow types are tagged with a number
function arguments with borrow type will be tagged from zero to "n"
then the borrows created in the function will be tagged by "n+1"
then the borrows created in contained closures will be tagged by "n+1+depth"
this tag will be inherited by further borrowers
for functions with multiple borrow typed arguments, that also return a borrow type,
	and the tag of returned type is inherited from any argument other than the first one (index 0),
	the returned type must determine that its tag will be inherited from which argument
	A&, B& -> C&1
only borrows with matched tags can be assigned to each other
this simple rule automatically guarantees correct lifetimes, cause it means:
, we can't assign a borrow to a mutable borrow variable captured in a closure
, we can't return a borrow from a function, unless it's originally borrowed from one of the function arguments

mutation of unique types, can only be seen by one variable
mutable borrow types allow shared mutation

dealing with allocated memory, at the end of functions:
, for unique types, if they are not moved out of the function, their heap memory will be deallocated
, for shared types, the reference count will be decreased by one, and when it reaches zero,
	their heap memory will be deallocated
, for borrow types, since they don't own the value, nothing happens

behavior of types in variable definitions (and assignments, in case of mutable ones, ie T and T!)
when a variable of type "T" is put into:
, a variable of type "T", static borrow/move/copy
, a variable of type "T$", static borrow/move/copy
, a variable of type "T&", borrow
, a variable of type "T!", borrow
when a variable of type "T$" is put into:
, a variable of type "T", it's compile time error
, a variable of type "T$", ref count
, a variable of type "T&", borrow
, a variable of type "T!", it's compile time error
when a variable of type "T&" is put into:
, a variable of type "T", copy
, a variable of type "T$", it's compile time error
, a variable of type "T&", borrow
, a variable of type "T!", it's compile time error
when a variable of type "T!" is put into:
, a variable of type "T", copy
, a variable of type "T$", it's compile time error
, a variable of type "T&", borrow
, a variable of type "T!", borrow

type kinds as components of a compound type
	eg fields of a record, or variables captured in a closure, or elements of a list:
, elements of a unique compound type, can be of unique or shared type (T& and T! are not allowed)
	C := (T, T$)
, elements of a mutable borrow compound type, can be of mutable or immutable borrow type
	v :C!
	v.0 :T!
	v.1 :T&
, elements of an immutable borrow compound type, can only be of immutable borrow type
	v :C&
	v.0 :T&
	v.1 :T&
, elements of a shared compound type, can only be of shared type
	v :C$
	v.0 :T$
	v.1 :T$

sharing mutable data in concurrent parts of a program is problematic
a data race happens when these three behaviors occur:
, two or more pointers access the same data at the same time
, at least one of the pointers is being used to write to the data
, there's no mechanism being used to synchronize access to the data
to deal with it, programming languages choose different approaches:
, some implement complicated and error prone lock mechanisms
, some abandon concurrency, and make single threaded programs
, functional programming languages avoid mutability as much as possible
	and when mutability is necessary, they use monads or algebraic effects to control shared mutability
	avoiding mutability, and the need for aggressive garbage collection, is not good for performance

Jina uses actors for asynchronous programming, and controls aliasing (sharing) and mutability,
	using the same approach used to deal with memory management
messages sent to actors are closures with unique type
and as shown above, their captured variables have either unique or shared (immutable) type
thus messages can safely be called concurrently, since they can't change their captured environment

actors are opaque types, ie their internal components are not accessible,
	and are referred to by an ID, instead of a memory address
actors (and their messages) can only be destroyed explicitly
reference counting combined with interior mutability can create reference cycles
	"https://doc.rust-lang.org/book/ch15-06-reference-cycles.html"
	in Jina interior mutability is only possible using actors
	since actors are not reference counted, there is no reference cycles in Jina

types show us what we can do with the data, ie which operations are valid
subtyping is problematic:
"https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)"
"https://www.tedinski.com/2018/06/26/variance.html"
i feel that this problem was the motivation behind dynamic typing (another bad design)
to avoid this problem, some languages (eg Rust) have two kinds of types:
, concrete types can be instantiated, but cannot have subtypes
, abstract types (also called traits or interfaces) cannot be instantiated, but can have subtypes
Rust has trait objects (dynamic interfaces) with the same problem regarding variance
	https://users.rust-lang.org/t/vector-covariant-in-its-element-type/80582
	https://stackoverflow.com/questions/55200843/what-does-it-mean-that-box-is-covariant-if-boxdyn-b-is-not-a-subtype-of-boxdy
there is no trait objects in Jina

Jina compiles to C3, and thus can easily use existing C libraries

Jina is installed by default in SPM Linux
in other Unix'like systems, install "gnunet", then:
; gnunet-download -o spm/ gnunet://fs/sks/$gnunet_namespace/packages/spm
; sh spm/install.sh
; spm install $gnunet_namespace jina
