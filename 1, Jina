Jina is a programming language with sane memory management, actors, and a coherent syntax

Mahsa Jina Amini was a 22 years old girl, murdered by the evil Islamic regime in Iran
at her funeral, these words were written on a stone above her grave:
	beloved Jina, you will not die, your name will become a code

memory management is done in a sane way, by using type tags:
, unique: T
, immutable: T!
, borrow: &T
, immutable borrow: &T!

unique own can be put into all
	it has a static bit that is initially zero (for a newly created data, or for return value)
	when it's moved into a unique var, the bit turns into one
	when a unique own var with bit 1 is put into another own var, it will be copied
	at the end of a function the bit gets zero again, so it can be moved out of function without copying
	if static (functions and module definitions) they will be copied when mutated
by "put into" i mean:
, variable assignment
, field assignment
, variable capture in functions
immutable borrow var can only be put into immutable borrow var (takes the reference)
mutable borrow var can only be put into immutable/mutable borrow var (takes the reference)
putting immutable own var into immutable/mutable borrow var is/isn't possible
putting immutable own var into immutable own var is possible (takes the reference)
	increase ref count, if it's not in the parent tree

numbers are stored on the stack (thus don't need memory management)
small records will be kept on stack, big ones on the heap
lists and dictionaries can initially be stored on the stack, if they are small
	and when they grow they will be reallocated on the heap

"https://www.toptal.com/software/eliminating-garbage-collector"
"http://blog.skylight.io/rust-means-never-having-to-close-a-socket/"

actors are used to achieve lock'free concurrency
sharing mutable data in concurrent parts of a program is problematic
a data race happens when these three behaviors occur:
, two or more pointers access the same data at the same time
, at least one of the pointers is being used to write to the data
, there's no mechanism being used to synchronize access to the data

to deal with it, programming languages choose different approaches:
, abandon concurrency altogether; make single threaded programs
, implement complicated and error prone lock mechanisms
, abandon mutability like in pure functional programming; but since at the end, mutability is necessary,
	a complicated mechanism like monads, linear types, effects, or Clojure reference types, must be used
	"https://stackoverflow.com/questions/9132346/clojure-differences-between-ref-var-agent-atom-with-examples"
	"https://clojure-doc.org/articles/language/concurrency_and_parallelism/"
	any how, the lack of direct mutability, and the need for aggressive garbage collection,
		means that functional programming is not an efficient method
, use the approach taken by Pony "https://www.ponylang.io/"
	it controls aliasing (sharing) and mutability, using reference capabilities
	Pony's approach introduces many complexities, especially when dealing with generics

in Jina, as shown above, only unique and immutable variables can be captured in immutable functions
messages are sent to actors via immutable functions
so in Jina, all mutations will be synchronous
immutable functions with null return can safely be called asynchronously,
	since they can't affect their environment

types show us what we can do with the data, ie which operations are valid
inheritance is problematic:
"https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)"
"https://www.tedinski.com/2018/06/26/variance.html"
i feel that this problem was the motivation behind dynamic typing (another bad design)
to avoid this problem, some languages (eg Rust) have two kinds of types:
, concrete types can be instantiated, but cannot have subtypes
, abstract types cannot be instantiated, but can have subtypes
Jina does the same, without actually splitting types into two kinds

Jina compiles to C3, and thus can easily use existing C libraries

to install Jina in SPM Linux:
; spm install $gnunet_namespace jina
in other Unix'like systems, install "gnunet", then:
; gnunet-download -o spm/ gnunet://fs/sks/$gnunet_namespace/packages/spm
; sh spm/install.sh
; spm install $gnunet_namespace jina
