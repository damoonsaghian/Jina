Jina is a programming language with sane memory management, actors, and a coherent syntax

Mahsa Jina Amini was a 22 years old girl, murdered by the evil Islamic regime in Iran
at her funeral, these words were written on a stone above her grave:
	beloved Jina, you will not die, your name will become a code

memory management is done in a sane way, by distinguishing three kind of variables:
, unique variable:
	v!! :T = ...
, mutable borrow variable:
	v! :T = ...
, immutable borrow variable (including static variables):
	v :T = ...

when a newly created value of is assigned to a variable:
, unique var: move
, immutable/mutable borrow var: borrow

unique var:
, put into unique var -> move/copy
	move if it's not used in the following code; copy otherwise
, put into mutable borrow var -> stack: borrow, heap: borrow
, put into immutable borrow var -> stack: copy, heap: borrow
, put into a newly created value (including returning from a function) -> stack: copy, heap: move/copy
and by "put into" i mean:
, variable assignment
, field assignment
, variables captured in functions

mutable borrow var:
, put into unique var -> deny
, put into mutable borrow var -> stack: borrow, heap: borrow
, put into immutable borrow var -> stack: copy, heap: borrow
, put into a newly created value (including returning from a function) -> deny

immutable borrow var:
, put into unique var -> copy
, put into mutable borrow var -> deny
, put into immutable borrow var -> stack: copy, heap: borrow
, put into a newly created value (including returning from a function) -> copy

shared reference wrapper prevents data from being deleted at the end of a function
	v :Shared[T] = Shared.new T.new()
equivalently:
	v :$T = $ T.new()
it also prevents the wrapped data from being mutated or copied
values of type $T can be put into immutable borrow variable of type T (stack: copy, heap: borrowed)
when a value of type $T is put into another var of type $T, reference count is increased

in Jina, internal mutability is only possible through unique variables
thus reference cycles are impossible
"https://doc.rust-lang.org/book/ch15-06-reference-cycles.html"

numbers are stored on the stack (thus don't need memory management)
small records will be kept on stack, big ones on the heap
lists and dictionaries can initially be stored on the stack, if they are small
	and when they grow they will be reallocated on the heap

"https://www.toptal.com/software/eliminating-garbage-collector"
"http://blog.skylight.io/rust-means-never-having-to-close-a-socket/"

actors are used to achieve lock'free concurrency
sharing mutable data in concurrent parts of a program is problematic
a data race happens when these three behaviors occur:
, two or more pointers access the same data at the same time
, at least one of the pointers is being used to write to the data
, there's no mechanism being used to synchronize access to the data

to deal with it, programming languages choose different approaches:
, abandon concurrency altogether; make single threaded programs
, implement complicated and error prone lock mechanisms
, abandon mutability like in pure functional programming; but since at the end, mutability is necessary,
	a complicated mechanism like monads, linear types, effects, or Clojure reference types, must be used
	"https://stackoverflow.com/questions/9132346/clojure-differences-between-ref-var-agent-atom-with-examples"
	"https://clojure-doc.org/articles/language/concurrency_and_parallelism/"
	any how, the lack of direct mutability, and the need for aggressive garbage collection,
		means that functional programming is not an efficient method
, use the approach taken by Pony "https://www.ponylang.io/"
	it controls aliasing (sharing) and mutability, using reference capabilities
	Pony's approach introduces many complexities, especially when dealing with generics

in Jina, all mutations are done inside actors and are thus are synchronous
messages sent to actors can safely be called asynchronously, since they can't change their captured environment

types show us what we can do with the data, ie which operations are valid
inheritance is problematic:
"https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)"
"https://www.tedinski.com/2018/06/26/variance.html"
i feel that this problem was the motivation behind dynamic typing (another bad design)
to avoid this problem, some languages (eg Rust) have two kinds of types:
, concrete types can be instantiated, but cannot have subtypes
, abstract types cannot be instantiated, but can have subtypes
Jina does the same, without actually splitting types into two kinds

Jina compiles to C3, and thus can easily use existing C libraries

to install Jina in SPM Linux:
; spm install $gnunet_namespace jina
in other Unix'like systems, install "gnunet", then:
; gnunet-download -o spm/ gnunet://fs/sks/$gnunet_namespace/packages/spm
; sh spm/install.sh
; spm install $gnunet_namespace jina
