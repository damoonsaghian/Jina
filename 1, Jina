Jina is a programming language with sane memory management, actors, and a coherent type system and syntax

Mahsa Jina Amini was a 22 years old girl, murdered by the evil Islamic regime in Iran
at her funeral, these words were written on a stone above her grave:
	beloved Jina, you will not die, your name will become a code

sane memory management means no garbage collector
"https://www.toptal.com/software/eliminating-garbage-collector"
"http://blog.skylight.io/rust-means-never-having-to-close-a-socket/"

there are three kinds of reference types in Jina:
, mutable borrow reference (to a value of type T): T!
, immutable borrow reference: T&
, shared reference: T$

dealing with allocated memory, at the end of functions:
, for values with normal (ie not reference) types, if not moved out, the memory will be deallocated
, for borrow references, since they don't own the value, nothing happens
, for shared references, the reference count will be decreased by one, and when it reaches zero,
	the memory will be deallocated

borrow references in function arguments, or those captured by the function, will be tagged as external
this tag will be inherited by further borrowers
only external borrow references can be returned from functions

mutable borrow references allows shared mutation
as opposed to the unique mutation of normal types, that can only be seen by one variable

reference counting combined with interior mutability can create reference cycles,
	for self referencing or mutually referencing types
"https://doc.rust-lang.org/book/ch15-06-reference-cycles.html"
self referencing and mutually referencing types are not allowed in Jina
so there is no reference cycles in Jina

behavior of references in variable definitions, and in case of mutable ones (ie T and T!), assignments
when a variable of type "T" is put into:
, a variable of type "T", copy stack, copy/move heap
, a variable of type "T$", copy stack, copy/move heap
, a variable of type "T&", copy stack, borrow heap
, a variable of type "T!", borrow
when a variable of type "T$" is put into:
, a variable of type "T", copy
, a variable of type "T$", copy stack, ref count heap
, a variable of type "T&", copy stack, borrow heap
, a variable of type "T!", it's compile time error
when a variable of type "T&" is put into:
, a variable of type "T", copy
, a variable of type "T$", it's compile time error
, a variable of type "T&", copy stack, borrow heap
, a variable of type "T!", it's compile time error
when a variable of type "T!" is put into:
, a variable of type "T", copy
, a variable of type "T$", it's compile time error
, a variable of type "T&", copy stack, borrow heap
, a variable of type "T!", borrow

behavior of references as components of a compound type (eg fields of a record, or variables captured by a closure):
, if "a" is a variable with type "(T, T$)" (T& and T! are not allowed):
	type of "a.0" is "T"
	type of "a.1" is "T$"
, if "a" is a variable with type "(T, T$)$" (T& and T! are not allowed):
	type of "a.0" is "T$"
	type of "a.1" is "T$"
, if "a" is a variable with type "(T, T$, T&)&" (T! is not allowed):
	type of "a.0" is "T&"
	type of "a.1" is "T&"
	type of "a.2" is "T&"
, if "a" is a variable with type "(T, T$, T&, T!)!":
	type of "a.0" is "T!"
	type of "a.1" is "T&"
	type of "a.2" is "T&"
	type of "a.3" is "T!"

sharing mutable data in concurrent parts of a program is problematic
a data race happens when these three behaviors occur:
, two or more pointers access the same data at the same time
, at least one of the pointers is being used to write to the data
, there's no mechanism being used to synchronize access to the data
to deal with it, programming languages choose different approaches:
, some implement complicated and error prone lock mechanisms
, some abandon concurrency, and make single threaded programs
, functional programming languages avoid mutability as much as possible
	and when mutability is necessary, they use monads or algebraic effects to control shared mutability
	avoiding mutability, and the need for aggressive garbage collection, is not good for performance

Jina uses actors for async programming, and controls aliasing (sharing) and mutability, using reference types
	that is the same approach used to deal with memory management
messages sent to actors are closures with normal (ie not reference) type
and as described above, they can only capture variables with normal types or shared (immutable) reference types
thus messages can safely be called asynchronously, since they can't change their captured environment

types show us what we can do with the data, ie which operations are valid
subtyping is problematic:
"https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)"
"https://www.tedinski.com/2018/06/26/variance.html"
i feel that this problem was the motivation behind dynamic typing (another bad design)
to avoid this problem, some languages (eg Rust) have two kinds of types:
, concrete types can be instantiated, but cannot have subtypes
, abstract types (also called traits or interfaces) cannot be instantiated, but can have subtypes
Rust has trait objects (dynamic interfaces) with the same problem regarding variance
	https://users.rust-lang.org/t/vector-covariant-in-its-element-type/80582
	https://stackoverflow.com/questions/55200843/what-does-it-mean-that-box-is-covariant-if-boxdyn-b-is-not-a-subtype-of-boxdy
there is no trait objects in Jina

Jina compiles to C3, and thus can easily use existing C libraries

Jina is installed by default in SPM Linux
in other Unix'like systems, install "gnunet", then:
; gnunet-download -o spm/ gnunet://fs/sks/$gnunet_namespace/packages/spm
; sh spm/install.sh
; spm install $gnunet_namespace jina
