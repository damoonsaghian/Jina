Jina is a programming language with sane memory management, actors, and a coherent syntax

Mahsa Jina Amini was a 22 years old girl, murdered by the evil Islamic regime in Iran
at her funeral, these words were written on a stone above her grave:
	beloved Jina, you will not die, your name will become a code

sane memory management means no garbage collector
"https://www.toptal.com/software/eliminating-garbage-collector"
"http://blog.skylight.io/rust-means-never-having-to-close-a-socket/"

three kinds of reference types:
, mutable borrow reference (to a value of type T): T!
, immutable borrow reference: T&
, shared reference: T$

at the end of functions:
, values with normal (ie not reference) types: if they are not moved out, their memory will be deallocated
, borrow references: they don't own the value, so they don't participate in memory management
, shared references: reference count will be decreased, and when it reaches zero, their memory will be deallocated

when a normal type is put into (variable definition and assignment) a borrow reference,
	the borrow reference will be tagged by a label representing the current function block
only untagged borrow references can be returned from functions

T put into:
, T (copy stack, copy/move heap)
, T$ (copy stack, copy/move heap)
, T& (copy stack, borrow heap)
, T! (borrow)
T$ put into:
, T (copy)
, T$ (copy stack, ref count heap)
, T& (copy stack, borrow heap)
, T! (error)
T& put into:
, T (copy)
, T$ (error)
, T& (copy stack, borrow heap)
, T! (error)
T! put into:
, T (copy)
, T$ (error)
, T& (copy stack, borrow heap)
, T! (borrow)

as a component of a compound type (eg fields of a record, or variables captured by a closure)
a :(T, T$) ;; T& and T! are not allowed
a.0 :T!
a.1 :T$
a :(T, T$)$ ;; T& and T! are not allowed
a.0 :T$
a.1 :T$
a :(T, T$, T&)& ;; T! is not allowed
a.0 :T&
a.1 :T&
a.2 :T&
a :(T, T$, T&, T!)!
a.0 :T!
a.1 :T&
a.2 :T&
a.3 :T!

mutable borrow references allows shared mutation
as opposed to the unique mutation of normal types, that can only be seen by one variable

reference counting combined with interior mutability can create reference cycles
"https://doc.rust-lang.org/book/ch15-06-reference-cycles.html"
interior mutability in Jina is only possible through actors
so to avoid reference cycles, just do not include "Actor[T]$" type in the state of an actor

sharing mutable data in concurrent parts of a program is problematic
a data race happens when these three behaviors occur:
, two or more pointers access the same data at the same time
, at least one of the pointers is being used to write to the data
, there's no mechanism being used to synchronize access to the data

to deal with it, programming languages choose different approaches:
, abandon concurrency altogether; make single threaded programs
, implement complicated and error prone lock mechanisms
, abandon mutability like in pure functional programming; but since at the end, mutability is necessary,
	a complicated mechanism like monads, linear types, effects, or Clojure reference types, must be used
	"https://stackoverflow.com/questions/9132346/clojure-differences-between-ref-var-agent-atom-with-examples"
	"https://clojure-doc.org/articles/language/concurrency_and_parallelism/"
	any how, the lack of direct mutability, and the need for aggressive garbage collection,
		means that functional programming is not an efficient method
, use the approach taken by Pony "https://www.ponylang.io/"
	it uses actors, and employs reference capabilities to control aliasing (sharing) and mutability
	Pony's approach introduces many complexities, especially when dealing with generics

Jina uses actors, and to control aliasing (sharing) and mutability, it relies on type tags
	ie the same approach used to deal with memory management
messages sent to actors are closures with shared type tag
and as described above, they can only capture plain and shared (immutable) variables
thus messages can safely be called asynchronously, since they can't change their captured environment

types show us what we can do with the data, ie which operations are valid
inheritance is problematic:
"https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)"
"https://www.tedinski.com/2018/06/26/variance.html"
i feel that this problem was the motivation behind dynamic typing (another bad design)
to avoid this problem, some languages (eg Rust) have two kinds of types:
, concrete types can be instantiated, but cannot have subtypes
, abstract types cannot be instantiated, but can have subtypes

Jina compiles to C3, and thus can easily use existing C libraries

to install Jina in SPM Linux:
; spm install $gnunet_namespace jina
in other Unix'like systems, install "gnunet", then:
; gnunet-download -o spm/ gnunet://fs/sks/$gnunet_namespace/packages/spm
; sh spm/install.sh
; spm install $gnunet_namespace jina
