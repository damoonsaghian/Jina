;cc #include <cmath>

;; https://flintlib.org/doc/arb.html
;; decimal?
;; https://www.bytereef.org/mpdecimal/index.html
;cc enum class Float : ;
;ns Float ::NumF ::OrdP ::StrRep
	to'Complex[n::NumR] = { self& -> Complex[n] |
		Complex self 0
	}
	
	add'op = { self&, addend :Float& -> Float |
	}
	add'op[n::NumR] = { self&, addend :Complex[n] -> Complex[n] |
	}
	
	add = { self!, addend :Float& |
		;cc ;
	}
	
	sub'op = { self&, subtrahend :Float& -> Float |
	}
	sub'op[n::NumR] = { self&, subtrahend :Complex[n] -> Complex[n] |
	}
	
	sub = { self!, subtrahend :Float& |
		;cc ;
	}
	
	mul'op = { self&, multiplicand :Float& -> Float |
	}
	mul'op[n::NumR] = { self&, multiplicand :Complex[n] -> Complex[n] |
	}
	
	mul = { self!, multiplicand :Float& |
		;cc ;
	}
	
	div'op = { self&, divisor :Float& -> Float |
	}
	div'op[n::NumR] = { self&, divisor :Complex[n] -> Complex[n] |
	}
	
	div = { self!, divisor :Float& |
		;cc ;
	}
	
	;; 0^0 is NaN
	exp = {}
	
	log = {}
	
	neg = { self& -> Float& |
		;cc return ;
	}
	
	negate = { self! |
		;cc ;
	}
	
	abs = { self& -> Float& |
		;cc return ;
	}
	
	cos = { self& -> Float |
	}
	acos = { self& -> Float |
	}
	cosh = { self& -> Float |
	}
	atanh = { self& -> Float |
	}
	sin = { self& -> Float |
	}
	asin = { self& -> Float |
	}
	sinh = { self& -> Float |
	}
	tan = { self& -> Float |
	}
	atan = { self& -> Float |
	}
	atan2 = { self& -> Float |
	}
	tanh = { self& -> Float |
	}
	
	inf =
	
	e = ;; base of the natural logarithm
	pi =
	
	;; OrdP
	
	equal = { self&, other :Float& -> ?Bool |
	}
	
	after = { self&, other :Float& -> ?Bool |
	}
	
	;; StrRep
	to'str = { self& -> Str |
	}

;cc enum class Float2 : double;

;ns Float2 ::NumF ::Ord ::StrRep
	to'Float = { self -> Float |
		;cc return ;
	}
	to'Complex[n::Num] = { self -> Complex[n] |
		Complex[n] self 0
	}
	
	add'op = { self, addend :Float2 -> Float2 |
		;cc return self + addend;
	}
	add'op = { self, addend :Float& -> Float |
		self.to'Float + addend
	}
	add'op[n::Num] = { self, addend :Complex[n] -> Complex[n] |
		self.to'Complex[n] + addend
	}
	
	add = { self!, addend :Float2 |
		;cc self += addend;
	}
	
	sub'op = { self, subtrahend :Float2 -> Float2 |
		;cc return self - subtrahend;
	}
	sub'op = { self, subtrahend :Float& -> Float |
		self.to'Float - subtrahend
	}
	sub'op[n::Num] = { self, subtrahend :Complex[n] -> Complex[n] |
		self.to'Complex[n] - subtrahend
	}
	
	sub = { self!, subtrahend :Float2 |
		;cc self -= subtrahend;
	}
	
	mul'op = { self, multiplicand :Float2 -> Float2 |
		;cc return self * multiplicand;
	}
	mul'op = { self, multiplicand :Float& -> Float |
		self.to'Float * multiplicand
	}
	mul'op[n::Num] = { self, multiplicand :Complex[n] -> Complex[n] |
		self.to'Complex[n] * multiplicand
	}
	
	mul = { self!, multiplicand :Float2 |
		;cc self *= multiplicand;
	}
	
	div'op = { self, divisor :Float2 -> Float2 |
		;cc return self / divisor;
	}
	div'op = { self, divisor :Float& -> Float |
		self.to'Float / divisor
	}
	div'op[n::Num] = { self, divisor :Complex[n] -> Complex[n] |
		self.to'Complex[n] / divisor
	}
	
	div = { self!, divisor :Float2 |
		;cc self /= divisor;
	}
	
	exp = { self, exponent :Float2 -> Float2 |
		;cc return double.pow(self, exponent);
	}
	exp = { self, exponent :Float& -> Float |
		self.to'Float ^ exponent
	}
	exp[n::Num] = { self, exponent :Complex[n] -> Complex[n] |
		self.to'Complex[n] ^ exponent
	}
	
	log = {}
	
	neg = { self -> Float2 |
		;cc return -self;
	}
	
	negate = { self! |
		;cc self *= -1;
	}
	
	abs = { self -> Float2 |
		;cc return math.abs(self);
	}
	
	next'up = { self -> Float2 |
	}
	next'down = { self -> Float2 |
	}
	
	cos = { self -> Float2 |
	}
	acos = { self -> Float2 |
	}
	cosh = { self -> Float2 |
	}
	atanh = { self -> Float2 |
	}
	sin = { self -> Float2 |
	}
	asin = { self -> Float2 |
	}
	sinh = { self -> Float2 |
	}
	tan = { self -> Float2 |
	}
	atan = { self -> Float2 |
	}
	atan2 = { self -> Float2 |
	}
	tanh = { self -> Float2 |
	}
	
	nan = ;cc
	inf = ;cc
	
	
	e = ;cc ;; base of the natural logarithm
	pi = ;cc
	
	;;Ord
	
	equal = { self, other :Float2 -> Bool |
		;cc self == other;
	}
	
	after = { self, other :Float2 -> Bool |
		;cc self > other;
	}
	
	;;StrRep
	to'str = { self -> Str |
	}

;cc enum class Float1 : float;
;ns Float1 ::NumF ::Ord ::StrRep
