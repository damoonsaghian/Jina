;; declare required functions and types from flint (skip if --no-flint)
;c3 extern fn ...;
;c3 distinct ... = any;
;; https://flintlib.org/

;; minus operator
	unary: "-x" (no space after minus sign) is equivalent to "x.neg()"
	binary: "x - y" is equivalent to "x.sub(y)"

;; if --no-flint, implement using c3 "double" to implement
;ns Num
	add = { self, other :Num\NumI\NumW -> Num |
	}
	sub = { self, other :Num\NumI\NumW -> Num |
	}
	
	neg = { self -> Num |
	}
	abs = { self -> Num |
	}
	
	mul = { self, other :Num -> Num |
	}
	div = { self, other :Num -> Num |
	}
	pow = { self, other :Num -> Num |
	}
	
	next'up = { self -> Num |
	}
	
	next'down = { self -> Num |
	}
	
	cos = { self | -> Num
	}
	acos = { self -> Num |
	}
	cosh = { self -> Num |
	}
	atanh = { self -> Num |
	}
	sin = { self -> Num |
	}
	asin = { self -> Num |
	}
	sinh = { self -> Num |
	}
	tan = { self -> Num |
	}
	atan = { self -> Num |
	}
	atan2 = { self -> Num |
	}
	tanh = { self -> Num |
	}
	
	log = { self -> Num |
	}
	log2 = { self -> Num |
	}
	log10 = { self -> Num |
	}
	
	nan =
	inf =
	
	e = ;; base of the natural logarithm
	pi =

;impl Ord
	is'less = {}

;impl StrRep
	to'string = {}

;; if --no-flint, use C3 "isz" to implement
;; https://flintlib.org/doc/fmpz.html
;ns NumI

;; use "usz" to implement
;ns NumW
	add = { self, other :NumW -> NumW |
	}
	sub = { self, other :NumW -> NumW |
	}
	
	mul = { self, other :NumW -> NumW |
	}
	div = { self, other :NumW -> NumW |
	}
	pow = { self, other :NumW -> NumW |
	}
	
	min = ;c3
	max = ;c3
	
	is'equal = {}
	
	;; creates a range iterator
	til = { self, arg2 :NumW -> Iter[NumW] |
	}
	
	to'int = { self -> NumI |
		;c3 return (double)self
	}

;impl Ord
	is'less = {}

;impl StrRep
	to'string = {}

;ns NumB
