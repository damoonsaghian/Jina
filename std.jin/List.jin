;; reading is fast, writing (except appending) is slow
;; to avoid unnecessary allocation, the initial list will be on stack, if number of elements and their size is small
	when we try to mutate it, and its size exceeds the initial size, it will be reallocated on the heap
List[t] := ;c3 std::collections::list{t}

;ns List[t] ::Iter ::StrRep
	get = { self&, index :IntU -> ?t& |
		;; checks if index is less than the length
	}
	
	append = { self!, element :t |
	}
	
	extend = { self!, ext :List[t]& |
	}
	
	put = { self!, element :t, at :IntU |
	}
	
	insert = { self!, element :t, at :IntU |
	}
	
	slice = { self!, from :IntU, to :?IntU = #null |
	}
	
	remove = { self!, at :IntU |
	}

	;;Iter
	iter = {}
	
	;;StrRep
	to'str = {}

;; linked list: reading is slow, writing is fast
ListL[t] := ;c3 std::collections::linkedlist{t};

;ns ListL[t] ::Iter ::StrRep
