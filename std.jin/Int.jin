;c3 import std::math;; https://gmplib.org/manual/
;; https://flintlib.org/doc/fmpz.html
Int :=
;ns Int ::Num ::Ord ::StrRep

;c3 typedef Int8 = long;

;ns Int8 ::Num ::Ord ::StrRep
	to'Int = { self -> Int |
		;c3 return ;
	}
	to'Float = { self -> Float |
		;c3 return ;
	}
	to'Complex[n::Num] = { self -> Complex[n] |
		Complex[n] self 0
	}
	to'Tensor[n::Num] = { self -> Tensor[n] |
		Tensor[n] [self]
	}
	
	add'op = {
		self, addend :Int8 -> Int8 |
			;c3 return self + addend;
		self, addend :Int& -> Int |
			self.to'Int + addend
		self, addend :Float& -> Float |
			self.to'Float + addend
		self, addend :Complex[n::Num] -> Complex[n] |
			self.to'Complex[n] + addend
		self, addend :Tensor[n::Num] -> Tensor[n] |
			self.to'Tensor[n] + addend
	}
	
	add = { self!, addend :Int8 |
		;c3 self += addend;
	}
	
	sub'op = {
		self, subtrahend :Int8 -> Int8 |
			;c3 return self - subtrahend;
		self, subtrahend :Int -> Int |
			self.to'Int - subtrahend
		self, subtrahend :Float& -> Float |
			self.to'Float - subtrahend
		self, subtrahend :Complex[n::Num] -> Complex[n] |
			self.to'Complex[n] - subtrahend
		self, subtrahend :Tensor[n::Num] -> Tensor[n] |
			self.to'Tensor[n] - subtrahend
	}
	
	sub = { self!, subtrahend :Int8 |
		;c3 self -= subtrahend;
	}
	
	mul'op = {
		self, multiplicand :Int8 -> Int8 |
			;c3 return self * multiplicand;
		self, multiplicand :Int -> Int |
			self.to'Int * multiplicand
		self, multiplicand :Float& -> Float |
			self.to'Float * multiplicand
		self, multiplicand :Complex[n::Num] -> Complex[n] |
			self.to'Complex[n] * multiplicand
		self, multiplicand :Tensor[n::Num] -> Tensor[n] |
			self.to'Tensor[n] * multiplicand
	}
	
	mul = { self!, multiplicand :Int8 |
		;c3 self *= multiplicand;
	}
	
	div'op = {
		self, divisor :Int8 -> ?Int8 |
			;c3 if (divisor != 0) return self / divisor;
			#null
		self, divisor :Int -> ?Int |
			divisor == 0 .then { #null } else: { self.to'Int / divisor }
		self, divisor :Num -> ?Num |
			divisor == 0 .then { #null } else: { self.to'Num / divisor }
		self, divisor :Complex[t] -> ?Complex[t] |
			divisor.0 == 0 .then { #null } else: { self.to'Complex[t] / divisor }
		self, divisor :Tensor[t] -> ?Tensor[t] |
			divisor_0 == 0 .then { #null } else: { self.to'Tensor[t] / divisor }
	}
	
	div = { self!, divisor :Int8 -> Bool |
		divisor == 0 .then { #false } else: {
			;c3 self /= divisor
			#true
		}
	}
	
	mod'op = {
		self, modulus :Int8 -> ?Int8 |
			;c3 if (x != 0) return self % divisor;
			#null
		self, modulus :Int -> ?Int |
			;c3 if (x != 0) return ;
			#null
	}
	
	mod = { self, devisor :Int8 -> Bool |
		divisor == 0 .then { #false } else: {
			;c3 self %= divisor
			#true
		}
	}
	
	neg'op = { self -> Int8 |
		;c3 return -self;
	}
	
	neg = { self! |
		;c3 self *= -1;
	}
	
	abs = { self -> Int8 |
		;c3 return math.abs(self);
	}
	
	to'num8 = { self -> Num8 |
		;c3 return (Num8) (double) (long) self;
	}
	to'num4 = { self -> Num4 |
		;c3 return (Num4) (float) (long) self;
	}
	
	min = ;c3
	max = ;c3
	
	;; create a range iterator
	til = { self, end :Int8 -> Iter[Int8] |
	}
	
	;;Ord
	
	is'equal = { self, other :Int8 -> Bool |
		;c3 self == other;
	}
	
	is'after = { self, other :Int8 -> Bool |
		;c3 self > other;
	}
	
	;;StrRep
	to'str = { self -> Str |
	}

;c3 typedef Int4 = int;
;ns Int4 ::Num ::Ord ::StrRep

;c3 typedef Int2 = short;
;ns Int2 ::Num ::Ord ::StrRep

;c3 typedef Int1 = ichar;
;ns Int1 ::Num ::Ord ::StrRep

;c3 typedef NumU = usz;
;ns NumU ::Num ::Ord ::StrRep

;c3 typedef NumU2 = ushort;
;ns NumU2 ::Num ::Ord ::StrRep

;c3 typedef NumU1 = char;
;ns NumU1 ::Num ::Ord ::StrRep
