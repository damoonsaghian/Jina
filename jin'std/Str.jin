Str := List[IntC]

;ns Str ::StrRep
	;; implement list methods such that they respect UTF8 encoding
	
	replace = { self!, substring :Str&, replacement :Str& |
	}
	
	split =
	join =
	
	find = { self, substring :Str& -> ?IntU |
	}
	contains = { self, substring :Str& -> Bool |
	}
	
	trim'prefix = { self!, prefix :Str& |
	}
	trim'suffix = { self!, suffix :Str& |
	}
	;; trim ASCII whitespace from the start of the string
	trim'start = { self! |
	}
	;; trim ASCII whitespace from the end of the string
	trim'end = { self! |
	}
	;; trim ASCII whitespace from the start and end of the string
	trim = { self! |
	}
	
	truncate = { self!, max'len :IntU |
	}
	
	clear = { self! | List.clear self }
	
	to'lower = { self! |
	}
	to'upper = { self! |
	}
	
	to'float = { self -> ?Float |
	}
	to'float2 = { self -> ?Float2 |
	}
	to'int = { self -> ?Int |
	}
	to'int8 = { self -> ?Int8 |
	}
	to'int4 = { self -> ?Int4 |
	}
	to'int2 = { self -> ?Int2 |
	}
	to'int1 = { self -> ?Int1 |
	}
	
	;; StrRep
	to'str = { self -> Str |
		rep = "\""
		rep.append self
		rep.append "\""
		rep
	}

;i StrRep
	to'str ::(self -> Str)&
