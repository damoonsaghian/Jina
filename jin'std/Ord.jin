;i Ord
	is'equal :(self, other: self -> Bool)
	
	is'after :(self, other: self -> Bool)
	
	is'after'or'equal = { self, other :self -> Bool |
		self > other \\ self == other
	}
	
	is'before = { self, other :self -> Bool |
		self >= other .neg
	}
	
	is'before'or'equal = { self, other :self -> Bool |
		self > other .neg
	}
	
	is'not'equal = { self, other :self -> Bool |
		self == other .neg
	}

;i Ord'p
	is'equal :(self, other: self -> ?Bool)
	
	is'after :(self, other: self -> ?Bool)
	
	is'after'or'equal = { self, other :self -> ?Bool |
		self > other >> {
			#null | #null
			#result is'after |
				self == other >> {
					#null | #null
					#result is'equal | is'after \\ is'equal
				}
		}	
	}
	
	is'before = { self, other :self -> ?Bool |
		self > other >> {
			#null | #null
			#result is'after |
				self == other >> {
					#null | #null
					#result is'equal | -is'equal && -is'after
				}
		}
	}
	
	is'before'or'equal = { self, other :self -> ?Bool |
		self > other >> {
			#null | #null
			#result is'after | -is'after
		}
	}
	
	is'not'equal = { self, other :self -> ?Bool |
		self == other >> {
			#null | #null
			#result is'equal | -is'equal
		}
	}
